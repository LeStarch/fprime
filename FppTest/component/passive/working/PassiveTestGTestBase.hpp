// ======================================================================
// \title  PassiveTestGTestBase.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for PassiveTest component Google Test harness base class
// ======================================================================

#ifndef PassiveTestGTestBase_HPP
#define PassiveTestGTestBase_HPP

#include "FppTest/component/passive/PassiveTestTesterBase.hpp"
#include "gtest/gtest.h"

// ----------------------------------------------------------------------
// Macros for typed user from port history assertions
// ----------------------------------------------------------------------

#define ASSERT_FROM_PORT_HISTORY_SIZE(size) \
  this->assertFromPortHistory_size(__FILE__, __LINE__, size)

#define ASSERT_from_arrayArgsOut_SIZE(size) \
  this->assert_from_arrayArgsOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_arrayArgsOut(index, _a, _aRef) \
  { \
    ASSERT_GT(this->fromPortHistory_arrayArgsOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of arrayArgsOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_arrayArgsOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_arrayArgsOut& _e = \
        this->fromPortHistory_arrayArgsOut->at(index); \
    ASSERT_EQ(_a, _e.a) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument a at index " \
      << index \
      << " in history of arrayArgsOut\n" \
      << "  Expected: " << _a << "\n" \
      << "  Actual:   " << _e.a << "\n"; \
    ASSERT_EQ(_aRef, _e.aRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument aRef at index " \
      << index \
      << " in history of arrayArgsOut\n" \
      << "  Expected: " << _aRef << "\n" \
      << "  Actual:   " << _e.aRef << "\n"; \
  }

#define ASSERT_from_arrayReturnOut_SIZE(size) \
  this->assert_from_arrayReturnOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_arrayReturnOut(index, _a, _aRef) \
  { \
    ASSERT_GT(this->fromPortHistory_arrayReturnOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of arrayReturnOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_arrayReturnOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_arrayReturnOut& _e = \
        this->fromPortHistory_arrayReturnOut->at(index); \
    ASSERT_EQ(_a, _e.a) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument a at index " \
      << index \
      << " in history of arrayReturnOut\n" \
      << "  Expected: " << _a << "\n" \
      << "  Actual:   " << _e.a << "\n"; \
    ASSERT_EQ(_aRef, _e.aRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument aRef at index " \
      << index \
      << " in history of arrayReturnOut\n" \
      << "  Expected: " << _aRef << "\n" \
      << "  Actual:   " << _e.aRef << "\n"; \
  }

#define ASSERT_from_enumArgsOut_SIZE(size) \
  this->assert_from_enumArgsOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_enumArgsOut(index, _en, _enRef) \
  { \
    ASSERT_GT(this->fromPortHistory_enumArgsOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of enumArgsOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_enumArgsOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_enumArgsOut& _e = \
        this->fromPortHistory_enumArgsOut->at(index); \
    ASSERT_EQ(_en, _e.en) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument en at index " \
      << index \
      << " in history of enumArgsOut\n" \
      << "  Expected: " << _en << "\n" \
      << "  Actual:   " << _e.en << "\n"; \
    ASSERT_EQ(_enRef, _e.enRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument enRef at index " \
      << index \
      << " in history of enumArgsOut\n" \
      << "  Expected: " << _enRef << "\n" \
      << "  Actual:   " << _e.enRef << "\n"; \
  }

#define ASSERT_from_enumReturnOut_SIZE(size) \
  this->assert_from_enumReturnOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_enumReturnOut(index, _en, _enRef) \
  { \
    ASSERT_GT(this->fromPortHistory_enumReturnOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of enumReturnOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_enumReturnOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_enumReturnOut& _e = \
        this->fromPortHistory_enumReturnOut->at(index); \
    ASSERT_EQ(_en, _e.en) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument en at index " \
      << index \
      << " in history of enumReturnOut\n" \
      << "  Expected: " << _en << "\n" \
      << "  Actual:   " << _e.en << "\n"; \
    ASSERT_EQ(_enRef, _e.enRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument enRef at index " \
      << index \
      << " in history of enumReturnOut\n" \
      << "  Expected: " << _enRef << "\n" \
      << "  Actual:   " << _e.enRef << "\n"; \
  }

#define ASSERT_from_noArgsOut_SIZE(size) \
  this->assert_from_noArgsOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_noArgsOut(index) \
  { \
    ASSERT_GT(this->fromPortHistory_noArgsOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of noArgsOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_noArgsOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_noArgsOut& _e = \
        this->fromPortHistory_noArgsOut->at(index); \
  }

#define ASSERT_from_noArgsReturnOut_SIZE(size) \
  this->assert_from_noArgsReturnOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_noArgsReturnOut(index) \
  { \
    ASSERT_GT(this->fromPortHistory_noArgsReturnOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of noArgsReturnOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_noArgsReturnOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_noArgsReturnOut& _e = \
        this->fromPortHistory_noArgsReturnOut->at(index); \
  }

#define ASSERT_from_primitiveArgsOut_SIZE(size) \
  this->assert_from_primitiveArgsOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_primitiveArgsOut(index, _u32, _u32Ref, _f32, _f32Ref, _b, _bRef) \
  { \
    ASSERT_GT(this->fromPortHistory_primitiveArgsOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of primitiveArgsOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_primitiveArgsOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_primitiveArgsOut& _e = \
        this->fromPortHistory_primitiveArgsOut->at(index); \
    ASSERT_EQ(_u32, _e.u32) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument u32 at index " \
      << index \
      << " in history of primitiveArgsOut\n" \
      << "  Expected: " << _u32 << "\n" \
      << "  Actual:   " << _e.u32 << "\n"; \
    ASSERT_EQ(_u32Ref, _e.u32Ref) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument u32Ref at index " \
      << index \
      << " in history of primitiveArgsOut\n" \
      << "  Expected: " << _u32Ref << "\n" \
      << "  Actual:   " << _e.u32Ref << "\n"; \
    ASSERT_EQ(_f32, _e.f32) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument f32 at index " \
      << index \
      << " in history of primitiveArgsOut\n" \
      << "  Expected: " << _f32 << "\n" \
      << "  Actual:   " << _e.f32 << "\n"; \
    ASSERT_EQ(_f32Ref, _e.f32Ref) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument f32Ref at index " \
      << index \
      << " in history of primitiveArgsOut\n" \
      << "  Expected: " << _f32Ref << "\n" \
      << "  Actual:   " << _e.f32Ref << "\n"; \
    ASSERT_EQ(_b, _e.b) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument b at index " \
      << index \
      << " in history of primitiveArgsOut\n" \
      << "  Expected: " << _b << "\n" \
      << "  Actual:   " << _e.b << "\n"; \
    ASSERT_EQ(_bRef, _e.bRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument bRef at index " \
      << index \
      << " in history of primitiveArgsOut\n" \
      << "  Expected: " << _bRef << "\n" \
      << "  Actual:   " << _e.bRef << "\n"; \
  }

#define ASSERT_from_primitiveReturnOut_SIZE(size) \
  this->assert_from_primitiveReturnOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_primitiveReturnOut(index, _u32, _u32Ref, _f32, _f32Ref, _b, _bRef) \
  { \
    ASSERT_GT(this->fromPortHistory_primitiveReturnOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of primitiveReturnOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_primitiveReturnOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_primitiveReturnOut& _e = \
        this->fromPortHistory_primitiveReturnOut->at(index); \
    ASSERT_EQ(_u32, _e.u32) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument u32 at index " \
      << index \
      << " in history of primitiveReturnOut\n" \
      << "  Expected: " << _u32 << "\n" \
      << "  Actual:   " << _e.u32 << "\n"; \
    ASSERT_EQ(_u32Ref, _e.u32Ref) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument u32Ref at index " \
      << index \
      << " in history of primitiveReturnOut\n" \
      << "  Expected: " << _u32Ref << "\n" \
      << "  Actual:   " << _e.u32Ref << "\n"; \
    ASSERT_EQ(_f32, _e.f32) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument f32 at index " \
      << index \
      << " in history of primitiveReturnOut\n" \
      << "  Expected: " << _f32 << "\n" \
      << "  Actual:   " << _e.f32 << "\n"; \
    ASSERT_EQ(_f32Ref, _e.f32Ref) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument f32Ref at index " \
      << index \
      << " in history of primitiveReturnOut\n" \
      << "  Expected: " << _f32Ref << "\n" \
      << "  Actual:   " << _e.f32Ref << "\n"; \
    ASSERT_EQ(_b, _e.b) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument b at index " \
      << index \
      << " in history of primitiveReturnOut\n" \
      << "  Expected: " << _b << "\n" \
      << "  Actual:   " << _e.b << "\n"; \
    ASSERT_EQ(_bRef, _e.bRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument bRef at index " \
      << index \
      << " in history of primitiveReturnOut\n" \
      << "  Expected: " << _bRef << "\n" \
      << "  Actual:   " << _e.bRef << "\n"; \
  }

#define ASSERT_from_prmGetIn_SIZE(size) \
  this->assert_from_prmGetIn_size(__FILE__, __LINE__, size)

#define ASSERT_from_prmGetIn(index, _id, _val) \
  { \
    ASSERT_GT(this->fromPortHistory_prmGetIn->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of prmGetIn\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_prmGetIn->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_prmGetIn& _e = \
        this->fromPortHistory_prmGetIn->at(index); \
    ASSERT_EQ(_id, _e.id) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument id at index " \
      << index \
      << " in history of prmGetIn\n" \
      << "  Expected: " << _id << "\n" \
      << "  Actual:   " << _e.id << "\n"; \
    ASSERT_EQ(_val, _e.val) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument val at index " \
      << index \
      << " in history of prmGetIn\n" \
      << "  Expected: " << _val << "\n" \
      << "  Actual:   " << _e.val << "\n"; \
  }

#define ASSERT_from_prmSetIn_SIZE(size) \
  this->assert_from_prmSetIn_size(__FILE__, __LINE__, size)

#define ASSERT_from_prmSetIn(index, _id, _val) \
  { \
    ASSERT_GT(this->fromPortHistory_prmSetIn->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of prmSetIn\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_prmSetIn->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_prmSetIn& _e = \
        this->fromPortHistory_prmSetIn->at(index); \
    ASSERT_EQ(_id, _e.id) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument id at index " \
      << index \
      << " in history of prmSetIn\n" \
      << "  Expected: " << _id << "\n" \
      << "  Actual:   " << _e.id << "\n"; \
    ASSERT_EQ(_val, _e.val) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument val at index " \
      << index \
      << " in history of prmSetIn\n" \
      << "  Expected: " << _val << "\n" \
      << "  Actual:   " << _e.val << "\n"; \
  }

#define ASSERT_from_stringArgsOut_SIZE(size) \
  this->assert_from_stringArgsOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_stringArgsOut(index, _str80, _str80Ref, _str100, _str100Ref) \
  { \
    ASSERT_GT(this->fromPortHistory_stringArgsOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of stringArgsOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_stringArgsOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_stringArgsOut& _e = \
        this->fromPortHistory_stringArgsOut->at(index); \
    ASSERT_EQ(_str80, _e.str80) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument str80 at index " \
      << index \
      << " in history of stringArgsOut\n" \
      << "  Expected: " << _str80 << "\n" \
      << "  Actual:   " << _e.str80 << "\n"; \
    ASSERT_EQ(_str80Ref, _e.str80Ref) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument str80Ref at index " \
      << index \
      << " in history of stringArgsOut\n" \
      << "  Expected: " << _str80Ref << "\n" \
      << "  Actual:   " << _e.str80Ref << "\n"; \
    ASSERT_EQ(_str100, _e.str100) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument str100 at index " \
      << index \
      << " in history of stringArgsOut\n" \
      << "  Expected: " << _str100 << "\n" \
      << "  Actual:   " << _e.str100 << "\n"; \
    ASSERT_EQ(_str100Ref, _e.str100Ref) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument str100Ref at index " \
      << index \
      << " in history of stringArgsOut\n" \
      << "  Expected: " << _str100Ref << "\n" \
      << "  Actual:   " << _e.str100Ref << "\n"; \
  }

#define ASSERT_from_structArgsOut_SIZE(size) \
  this->assert_from_structArgsOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_structArgsOut(index, _s, _sRef) \
  { \
    ASSERT_GT(this->fromPortHistory_structArgsOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of structArgsOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_structArgsOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_structArgsOut& _e = \
        this->fromPortHistory_structArgsOut->at(index); \
    ASSERT_EQ(_s, _e.s) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument s at index " \
      << index \
      << " in history of structArgsOut\n" \
      << "  Expected: " << _s << "\n" \
      << "  Actual:   " << _e.s << "\n"; \
    ASSERT_EQ(_sRef, _e.sRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument sRef at index " \
      << index \
      << " in history of structArgsOut\n" \
      << "  Expected: " << _sRef << "\n" \
      << "  Actual:   " << _e.sRef << "\n"; \
  }

#define ASSERT_from_structReturnOut_SIZE(size) \
  this->assert_from_structReturnOut_size(__FILE__, __LINE__, size)

#define ASSERT_from_structReturnOut(index, _s, _sRef) \
  { \
    ASSERT_GT(this->fromPortHistory_structReturnOut->size(), static_cast<U32>(index)) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Index into history of structReturnOut\n" \
      << "  Expected: Less than size of history (" \
      << this->fromPortHistory_structReturnOut->size() << ")\n" \
      << "  Actual:   " << index << "\n"; \
      const FromPortEntry_structReturnOut& _e = \
        this->fromPortHistory_structReturnOut->at(index); \
    ASSERT_EQ(_s, _e.s) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument s at index " \
      << index \
      << " in history of structReturnOut\n" \
      << "  Expected: " << _s << "\n" \
      << "  Actual:   " << _e.s << "\n"; \
    ASSERT_EQ(_sRef, _e.sRef) \
      << "\n" \
      << __FILE__ << ":" << __LINE__ << "\n" \
      << "  Value:    Value of argument sRef at index " \
      << index \
      << " in history of structReturnOut\n" \
      << "  Expected: " << _sRef << "\n" \
      << "  Actual:   " << _e.sRef << "\n"; \
  }

// ----------------------------------------------------------------------
// Macros for command history assertions
// ----------------------------------------------------------------------

#define ASSERT_CMD_RESPONSE_SIZE(size) \
  this->assertCmdResponse_size(__FILE__, __LINE__, size)

#define ASSERT_CMD_RESPONSE(index, opCode, cmdSeq, response) \
  this->assertCmdResponse(__FILE__, __LINE__, index, opCode, cmdSeq, response)

// ----------------------------------------------------------------------
// Macros for event history assertions
// ----------------------------------------------------------------------

#define ASSERT_EVENTS_SIZE(size) \
  this->assertEvents_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventNoArgs_SIZE(size) \
  this->assertEvents_EventNoArgs_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventPrimitive_SIZE(size) \
  this->assertEvents_EventPrimitive_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventPrimitive(size, _u32_1, _u32_2, _f32_1, _f32_2, _b1, _b2) \
  this->assertEvents_EventPrimitive(__FILE__, __LINE__, size, _u32_1, _u32_2, _f32_1, _f32_2, _b1, _b2)

#define ASSERT_EVENTS_EventString_SIZE(size) \
  this->assertEvents_EventString_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventString(size, _str1, _str2) \
  this->assertEvents_EventString(__FILE__, __LINE__, size, _str1, _str2)

#define ASSERT_EVENTS_EventEnum_SIZE(size) \
  this->assertEvents_EventEnum_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventEnum(size, _en) \
  this->assertEvents_EventEnum(__FILE__, __LINE__, size, _en)

#define ASSERT_EVENTS_EventArray_SIZE(size) \
  this->assertEvents_EventArray_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventArray(size, _arr) \
  this->assertEvents_EventArray(__FILE__, __LINE__, size, _arr)

#define ASSERT_EVENTS_EventStruct_SIZE(size) \
  this->assertEvents_EventStruct_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventStruct(size, _str) \
  this->assertEvents_EventStruct(__FILE__, __LINE__, size, _str)

#define ASSERT_EVENTS_EventBool_SIZE(size) \
  this->assertEvents_EventBool_size(__FILE__, __LINE__, size)

#define ASSERT_EVENTS_EventBool(size, _b) \
  this->assertEvents_EventBool(__FILE__, __LINE__, size, _b)

// ----------------------------------------------------------------------
// Macros for telemetry history assertions
// ----------------------------------------------------------------------

#define ASSERT_TLM_SIZE(size) \
  this->assertTlm_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_ChannelEnum_SIZE(size) \
  this->assertTlm_ChannelEnum_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_ChannelEnum(index, value) \
  this->assertTlm_ChannelEnum(__FILE__, __LINE__, index, value)

#define ASSERT_TLM_ChannelArray_SIZE(size) \
  this->assertTlm_ChannelArray_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_ChannelArray(index, value) \
  this->assertTlm_ChannelArray(__FILE__, __LINE__, index, value)

#define ASSERT_TLM_ChannelStruct_SIZE(size) \
  this->assertTlm_ChannelStruct_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_ChannelStruct(index, value) \
  this->assertTlm_ChannelStruct(__FILE__, __LINE__, index, value)

#define ASSERT_TLM_ChannelU32_SIZE(size) \
  this->assertTlm_ChannelU32_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_ChannelU32(index, value) \
  this->assertTlm_ChannelU32(__FILE__, __LINE__, index, value)

#define ASSERT_TLM_ChannelF32_SIZE(size) \
  this->assertTlm_ChannelF32_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_ChannelF32(index, value) \
  this->assertTlm_ChannelF32(__FILE__, __LINE__, index, value)

#define ASSERT_TLM_ChannelString_SIZE(size) \
  this->assertTlm_ChannelString_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_ChannelString(index, value) \
  this->assertTlm_ChannelString(__FILE__, __LINE__, index, value)

//! \class PassiveTestGTestBase
//! \brief Auto-generated base for PassiveTest component Google Test harness
class PassiveTestGTestBase :
  public PassiveTestTesterBase
{

  protected:

    // ----------------------------------------------------------------------
    // Construction and destruction
    // ----------------------------------------------------------------------

    //! Construct object PassiveTestGTestBase
    PassiveTestGTestBase(
        const char* const compName, //!< The component name
        const U32 maxHistorySize //!< The maximum size of each history
    );

    //! Destroy object PassiveTestGTestBase
    ~PassiveTestGTestBase();

  protected:

    // ----------------------------------------------------------------------
    // From ports
    // ----------------------------------------------------------------------

    //! From ports
    void assertFromPortHistory_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: arrayArgsOut
    void assert_from_arrayArgsOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: arrayReturnOut
    void assert_from_arrayReturnOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: enumArgsOut
    void assert_from_enumArgsOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: enumReturnOut
    void assert_from_enumReturnOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: noArgsOut
    void assert_from_noArgsOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: noArgsReturnOut
    void assert_from_noArgsReturnOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: primitiveArgsOut
    void assert_from_primitiveArgsOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: primitiveReturnOut
    void assert_from_primitiveReturnOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: prmGetIn
    void assert_from_prmGetIn_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: prmSetIn
    void assert_from_prmSetIn_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: stringArgsOut
    void assert_from_stringArgsOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: structArgsOut
    void assert_from_structArgsOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! From port: structReturnOut
    void assert_from_structReturnOut_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

  protected:

    // ----------------------------------------------------------------------
    // Commands
    // ----------------------------------------------------------------------

    //! Assert size of command response history
    void assertCmdResponse_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Assert the command response history at index
    void assertCmdResponse(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        FwOpcodeType opCode, //!< The opcode
        U32 cmdSeq, //!< The command sequence number
        Fw::CmdResponse response //!< The command response
    ) const;

  protected:

    // ----------------------------------------------------------------------
    // Events
    // ----------------------------------------------------------------------

    //! Assert the size of event history
    void assertEvents_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventNoArgs
    void assertEvents_EventNoArgs_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventPrimitive
    void assertEvents_EventPrimitive_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventPrimitive
    void assertEvents_EventPrimitive(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const U32 u32_1, //!< A U32
        const U32 u32_2, //!< A U32
        const F32 f32_1, //!< An F32
        const F32 f32_2, //!< An F32
        const bool b1, //!< A boolean
        const bool b2 //!< A boolean
    ) const;

    //! Event: EventString
    void assertEvents_EventString_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventString
    void assertEvents_EventString(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const char* const str1, //!< A string
        const char* const str2 //!< Another string
    ) const;

    //! Event: EventEnum
    void assertEvents_EventEnum_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventEnum
    void assertEvents_EventEnum(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const FormalParamEnum& en //!< An enum
    ) const;

    //! Event: EventArray
    void assertEvents_EventArray_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventArray
    void assertEvents_EventArray(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const FormalParamArray& arr //!< An array
    ) const;

    //! Event: EventStruct
    void assertEvents_EventStruct_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventStruct
    void assertEvents_EventStruct(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const FormalParamStruct& str //!< A struct
    ) const;

    //! Event: EventBool
    void assertEvents_EventBool_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Event: EventBool
    void assertEvents_EventBool(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const bool b //!< A boolean
    ) const;

  protected:

    // ----------------------------------------------------------------------
    // Telemetry
    // ----------------------------------------------------------------------

    //! Assert the size of telemetry history
    void assertTlm_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Channel: ChannelEnum
    void assertTlm_ChannelEnum_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Channel: ChannelEnum
    void assertTlm_ChannelEnum(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const FormalParamEnum& val //!< The channel value
    ) const;

    //! Channel: ChannelArray
    void assertTlm_ChannelArray_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Channel: ChannelArray
    void assertTlm_ChannelArray(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const FormalParamArray& val //!< The channel value
    ) const;

    //! Channel: ChannelStruct
    void assertTlm_ChannelStruct_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Channel: ChannelStruct
    void assertTlm_ChannelStruct(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const FormalParamStruct& val //!< The channel value
    ) const;

    //! Channel: ChannelU32
    void assertTlm_ChannelU32_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Channel: ChannelU32
    void assertTlm_ChannelU32(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const U32 val //!< The channel value
    ) const;

    //! Channel: ChannelF32
    void assertTlm_ChannelF32_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Channel: ChannelF32
    void assertTlm_ChannelF32(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const F32 val //!< The channel value
    ) const;

    //! Channel: ChannelString
    void assertTlm_ChannelString_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Channel: ChannelString
    void assertTlm_ChannelString(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        const char* const val //!< The channel value
    ) const;

};

#endif
