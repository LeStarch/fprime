// ======================================================================
// \title  PassiveTestTesterBase.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for PassiveTest component test harness base class
// ======================================================================

#ifndef PassiveTestTesterBase_HPP
#define PassiveTestTesterBase_HPP

#include <cstdio>

#include "FppTest/component/passive/PassiveTestComponentAc.hpp"
#include "Fw/Comp/PassiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Types/Assert.hpp"

//! \class PassiveTestTesterBase
//! \brief Auto-generated base for PassiveTest component test harness
class PassiveTestTesterBase :
  public Fw::PassiveComponentBase
{

  protected:

    // ----------------------------------------------------------------------
    // History class
    // ----------------------------------------------------------------------

    //! \class History
    //! \brief A history of port inputs
    //!
    template<typename T>
    class History
    {

      public:

        //! Create a History
        History(
           const U32 maxSize //!< The maximum history size
        ) :
          numEntries(0),
          maxSize(maxSize)
        {
          this->entries = new T[maxSize];
        }

        //! Destroy a History
        ~History()
        {
          delete[] this->entries;
        }

        //! Clear the history
        //!
        void clear()
        {
          this->numEntries = 0;
        }

        //! Push an item onto the history
        //!
        void push_back(
            T entry //!< The item
        )
        {
          FW_ASSERT(this->numEntries < this->maxSize);
          entries[this->numEntries++] = entry;
        }

        //! Get an item at an index
        //!
        //! \return The item at index i
        T at(
            const U32 i //!< The index
        ) const
        {
          FW_ASSERT(i < this->numEntries);
          return entries[i];
        }

        //! Get the number of entries in the history
        //!
        //! \return The number of entries in the history
        U32 size() const
        {
          return this->numEntries;
        }

      private:

        //! The number of entries in the history
        U32 numEntries;

        //! The maximum history size
        const U32 maxSize;

        //! The entries
        T* entries;

    };

  protected:

    // ----------------------------------------------------------------------
    // History types
    // ----------------------------------------------------------------------

    //! A history entry for port from_arrayArgsOut
    struct FromPortEntry_arrayArgsOut {
      FormalParamArray a;
      FormalParamArray aRef;
    };

    //! A history entry for port from_arrayReturnOut
    struct FromPortEntry_arrayReturnOut {
      FormalParamArray a;
      FormalParamArray aRef;
    };

    //! A history entry for port from_enumArgsOut
    struct FromPortEntry_enumArgsOut {
      FormalParamEnum en;
      FormalParamEnum enRef;
    };

    //! A history entry for port from_enumReturnOut
    struct FromPortEntry_enumReturnOut {
      FormalParamEnum en;
      FormalParamEnum enRef;
    };

    //! A history entry for port from_primitiveArgsOut
    struct FromPortEntry_primitiveArgsOut {
      U32 u32;
      U32 u32Ref;
      F32 f32;
      F32 f32Ref;
      bool b;
      bool bRef;
    };

    //! A history entry for port from_primitiveReturnOut
    struct FromPortEntry_primitiveReturnOut {
      U32 u32;
      U32 u32Ref;
      F32 f32;
      F32 f32Ref;
      bool b;
      bool bRef;
    };

    //! A history entry for port from_prmGetIn
    struct FromPortEntry_prmGetIn {
      FwPrmIdType id;
      Fw::ParamBuffer val;
    };

    //! A history entry for port from_prmSetIn
    struct FromPortEntry_prmSetIn {
      FwPrmIdType id;
      Fw::ParamBuffer val;
    };

    //! A history entry for port from_stringArgsOut
    struct FromPortEntry_stringArgsOut {
      StringArgsPortStrings::StringSize80 str80;
      StringArgsPortStrings::StringSize80 str80Ref;
      StringArgsPortStrings::StringSize100 str100;
      StringArgsPortStrings::StringSize100 str100Ref;
    };

    //! A history entry for port from_structArgsOut
    struct FromPortEntry_structArgsOut {
      FormalParamStruct s;
      FormalParamStruct sRef;
    };

    //! A history entry for port from_structReturnOut
    struct FromPortEntry_structReturnOut {
      FormalParamStruct s;
      FormalParamStruct sRef;
    };

    //! A type representing a command response
    struct CmdResponse {
      FwOpcodeType opCode;
      U32 cmdSeq;
      Fw::CmdResponse response;
    };

#if FW_ENABLE_TEXT_LOGGING

    //! A history entry for text log events
    struct TextLogEntry {
      U32 id;
      Fw::Time timeTag;
      Fw::LogSeverity severity;
      Fw::TextLogString text;
    };

#endif

    //! A history entry for event EventPrimitive
    struct EventEntry_EventPrimitive {
      U32 u32_1;
      U32 u32_2;
      F32 f32_1;
      F32 f32_2;
      bool b1;
      bool b2;
    };

    //! A history entry for event EventString
    struct EventEntry_EventString {
      Fw::LogStringArg str1;
      Fw::LogStringArg str2;
    };

    //! A history entry for event EventEnum
    struct EventEntry_EventEnum {
      FormalParamEnum en;
    };

    //! A history entry for event EventArray
    struct EventEntry_EventArray {
      FormalParamArray arr;
    };

    //! A history entry for event EventStruct
    struct EventEntry_EventStruct {
      FormalParamStruct str;
    };

    //! A history entry for event EventBool
    struct EventEntry_EventBool {
      bool b;
    };

    //! A history entry for telemetry channel ChannelEnum
    struct TlmEntry_ChannelEnum {
      Fw::Time timeTag;
      FormalParamEnum arg;
    };

    //! A history entry for telemetry channel ChannelArray
    struct TlmEntry_ChannelArray {
      Fw::Time timeTag;
      FormalParamArray arg;
    };

    //! A history entry for telemetry channel ChannelStruct
    struct TlmEntry_ChannelStruct {
      Fw::Time timeTag;
      FormalParamStruct arg;
    };

    //! A history entry for telemetry channel ChannelU32
    struct TlmEntry_ChannelU32 {
      Fw::Time timeTag;
      U32 arg;
    };

    //! A history entry for telemetry channel ChannelF32
    struct TlmEntry_ChannelF32 {
      Fw::Time timeTag;
      F32 arg;
    };

    //! A history entry for telemetry channel ChannelString
    struct TlmEntry_ChannelString {
      Fw::Time timeTag;
      Fw::TlmString arg;
    };

  public:

    // ----------------------------------------------------------------------
    // Component initialization
    // ----------------------------------------------------------------------

    //! Initialize object PassiveTestTesterBase
    virtual void init(
        NATIVE_INT_TYPE instance = 0 //!< The instance number
    );

  public:

    // ----------------------------------------------------------------------
    // Connectors for to ports
    // ----------------------------------------------------------------------

    //! Connect port to cmdIn[portNum]
    void connect_to_cmdIn(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::InputCmdPort* port //!< The input port
    );

    //! Connect port to arrayArgsGuarded[portNum]
    void connect_to_arrayArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputArrayArgsPort* port //!< The input port
    );

    //! Connect port to arrayArgsSync[portNum]
    void connect_to_arrayArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputArrayArgsPort* port //!< The input port
    );

    //! Connect port to arrayReturnGuarded[portNum]
    void connect_to_arrayReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputArrayReturnPort* port //!< The input port
    );

    //! Connect port to arrayReturnSync[portNum]
    void connect_to_arrayReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputArrayReturnPort* port //!< The input port
    );

    //! Connect port to cmdOut[portNum]
    void connect_to_cmdOut(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::InputCmdPort* port //!< The input port
    );

    //! Connect port to enumArgsGuarded[portNum]
    void connect_to_enumArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputEnumArgsPort* port //!< The input port
    );

    //! Connect port to enumArgsSync[portNum]
    void connect_to_enumArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputEnumArgsPort* port //!< The input port
    );

    //! Connect port to enumReturnGuarded[portNum]
    void connect_to_enumReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputEnumReturnPort* port //!< The input port
    );

    //! Connect port to enumReturnSync[portNum]
    void connect_to_enumReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputEnumReturnPort* port //!< The input port
    );

    //! Connect port to noArgsGuarded[portNum]
    void connect_to_noArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputNoArgsPort* port //!< The input port
    );

    //! Connect port to noArgsReturnGuarded[portNum]
    void connect_to_noArgsReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputNoArgsReturnPort* port //!< The input port
    );

    //! Connect port to noArgsReturnSync[portNum]
    void connect_to_noArgsReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputNoArgsReturnPort* port //!< The input port
    );

    //! Connect port to noArgsSync[portNum]
    void connect_to_noArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputNoArgsPort* port //!< The input port
    );

    //! Connect port to primitiveArgsGuarded[portNum]
    void connect_to_primitiveArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputPrimitiveArgsPort* port //!< The input port
    );

    //! Connect port to primitiveArgsSync[portNum]
    void connect_to_primitiveArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputPrimitiveArgsPort* port //!< The input port
    );

    //! Connect port to primitiveReturnGuarded[portNum]
    void connect_to_primitiveReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputPrimitiveReturnPort* port //!< The input port
    );

    //! Connect port to primitiveReturnSync[portNum]
    void connect_to_primitiveReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputPrimitiveReturnPort* port //!< The input port
    );

    //! Connect port to stringArgsGuarded[portNum]
    void connect_to_stringArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputStringArgsPort* port //!< The input port
    );

    //! Connect port to stringArgsSync[portNum]
    void connect_to_stringArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputStringArgsPort* port //!< The input port
    );

    //! Connect port to structArgsGuarded[portNum]
    void connect_to_structArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputStructArgsPort* port //!< The input port
    );

    //! Connect port to structArgsSync[portNum]
    void connect_to_structArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputStructArgsPort* port //!< The input port
    );

    //! Connect port to structReturnGuarded[portNum]
    void connect_to_structReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputStructReturnPort* port //!< The input port
    );

    //! Connect port to structReturnSync[portNum]
    void connect_to_structReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        InputStructReturnPort* port //!< The input port
    );

    //! Connect port to serialGuarded[portNum]
    void connect_to_serialGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::InputSerializePort* port //!< The input port
    );

    //! Connect port to serialSync[portNum]
    void connect_to_serialSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::InputSerializePort* port //!< The input port
    );

  public:

    // ----------------------------------------------------------------------
    // Getters for from ports
    // ----------------------------------------------------------------------

    //! Get from port at index
    //!
    //! \return from_cmdRegOut[portNum]
    Fw::InputCmdRegPort* get_from_cmdRegOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_cmdResponseOut[portNum]
    Fw::InputCmdResponsePort* get_from_cmdResponseOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_eventOut[portNum]
    Fw::InputLogPort* get_from_eventOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_prmGetOut[portNum]
    Fw::InputPrmGetPort* get_from_prmGetOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_prmSetOut[portNum]
    Fw::InputPrmSetPort* get_from_prmSetOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

#if FW_ENABLE_TEXT_LOGGING == 1

    //! Get from port at index
    //!
    //! \return from_textEventOut[portNum]
    Fw::InputLogTextPort* get_from_textEventOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

#endif

    //! Get from port at index
    //!
    //! \return from_timeGetOut[portNum]
    Fw::InputTimePort* get_from_timeGetOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_tlmOut[portNum]
    Fw::InputTlmPort* get_from_tlmOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_arrayArgsOut[portNum]
    InputArrayArgsPort* get_from_arrayArgsOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_arrayReturnOut[portNum]
    InputArrayReturnPort* get_from_arrayReturnOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_enumArgsOut[portNum]
    InputEnumArgsPort* get_from_enumArgsOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_enumReturnOut[portNum]
    InputEnumReturnPort* get_from_enumReturnOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_noArgsOut[portNum]
    InputNoArgsPort* get_from_noArgsOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_noArgsReturnOut[portNum]
    InputNoArgsReturnPort* get_from_noArgsReturnOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_primitiveArgsOut[portNum]
    InputPrimitiveArgsPort* get_from_primitiveArgsOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_primitiveReturnOut[portNum]
    InputPrimitiveReturnPort* get_from_primitiveReturnOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_prmGetIn[portNum]
    Fw::InputPrmGetPort* get_from_prmGetIn(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_prmSetIn[portNum]
    Fw::InputPrmSetPort* get_from_prmSetIn(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_stringArgsOut[portNum]
    InputStringArgsPort* get_from_stringArgsOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_structArgsOut[portNum]
    InputStructArgsPort* get_from_structArgsOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_structReturnOut[portNum]
    InputStructReturnPort* get_from_structReturnOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Get from port at index
    //!
    //! \return from_serialOut[portNum]
    Fw::InputSerializePort* get_from_serialOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

  protected:

    // ----------------------------------------------------------------------
    // Component construction and destruction
    // ----------------------------------------------------------------------

    //! Construct object PassiveTestTesterBase
    PassiveTestTesterBase(
        const char* const compName, //!< The component name
        const U32 maxHistorySize //!< The maximum size of each history
    );

    //! Destroy object PassiveTestTesterBase
    virtual ~PassiveTestTesterBase();

  protected:

    // ----------------------------------------------------------------------
    // Handlers to implement for from ports
    // ----------------------------------------------------------------------

    //! Handler for input port from_arrayArgsOut
    virtual void from_arrayArgsOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    ) = 0;

    //! Handler for input port from_arrayReturnOut
    virtual FormalParamArray from_arrayReturnOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    ) = 0;

    //! Handler for input port from_enumArgsOut
    virtual void from_enumArgsOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    ) = 0;

    //! Handler for input port from_enumReturnOut
    virtual FormalParamEnum from_enumReturnOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    ) = 0;

    //! Handler for input port from_noArgsOut
    virtual void from_noArgsOut_handler(
        NATIVE_INT_TYPE portNum //!< The port number
    ) = 0;

    //! Handler for input port from_noArgsReturnOut
    virtual bool from_noArgsReturnOut_handler(
        NATIVE_INT_TYPE portNum //!< The port number
    ) = 0;

    //! Handler for input port from_primitiveArgsOut
    virtual void from_primitiveArgsOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    ) = 0;

    //! Handler for input port from_primitiveReturnOut
    virtual U32 from_primitiveReturnOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    ) = 0;

    //! Handler for input port from_prmGetIn
    virtual Fw::ParamValid from_prmGetIn_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    ) = 0;

    //! Handler for input port from_prmSetIn
    virtual void from_prmSetIn_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    ) = 0;

    //! Handler for input port from_stringArgsOut
    virtual void from_stringArgsOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        const StringArgsPortStrings::StringSize80& str80, //!< A string of size 80
        StringArgsPortStrings::StringSize80& str80Ref,
        const StringArgsPortStrings::StringSize100& str100, //!< A string of size 100
        StringArgsPortStrings::StringSize100& str100Ref
    ) = 0;

    //! Handler for input port from_structArgsOut
    virtual void from_structArgsOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    ) = 0;

    //! Handler for input port from_structReturnOut
    virtual FormalParamStruct from_structReturnOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    ) = 0;

    //! Handler for input port from_serialOut
    virtual void from_serialOut_handler(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::SerializeBufferBase& buffer //!< The serialization buffer
    ) = 0;

  protected:

    // ----------------------------------------------------------------------
    // Handler base-class functions for from ports
    // ----------------------------------------------------------------------

    //! Handler base-class function for from_arrayArgsOut
    void from_arrayArgsOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Handler base-class function for from_arrayReturnOut
    FormalParamArray from_arrayReturnOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Handler base-class function for from_enumArgsOut
    void from_enumArgsOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Handler base-class function for from_enumReturnOut
    FormalParamEnum from_enumReturnOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Handler base-class function for from_noArgsOut
    void from_noArgsOut_handlerBase(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Handler base-class function for from_noArgsReturnOut
    bool from_noArgsReturnOut_handlerBase(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Handler base-class function for from_primitiveArgsOut
    void from_primitiveArgsOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Handler base-class function for from_primitiveReturnOut
    U32 from_primitiveReturnOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Handler base-class function for from_prmGetIn
    Fw::ParamValid from_prmGetIn_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

    //! Handler base-class function for from_prmSetIn
    void from_prmSetIn_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

    //! Handler base-class function for from_stringArgsOut
    void from_stringArgsOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        const StringArgsPortStrings::StringSize80& str80, //!< A string of size 80
        StringArgsPortStrings::StringSize80& str80Ref,
        const StringArgsPortStrings::StringSize100& str100, //!< A string of size 100
        StringArgsPortStrings::StringSize100& str100Ref
    );

    //! Handler base-class function for from_structArgsOut
    void from_structArgsOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Handler base-class function for from_structReturnOut
    FormalParamStruct from_structReturnOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Handler base-class function for from_serialOut
    void from_serialOut_handlerBase(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::SerializeBufferBase& buffer //!< The serialization buffer
    );

  protected:

    // ----------------------------------------------------------------------
    // Invocation functions for to ports
    // ----------------------------------------------------------------------

    //! Invoke the to port connected to arrayArgsGuarded
    void invoke_to_arrayArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Invoke the to port connected to arrayArgsSync
    void invoke_to_arrayArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Invoke the to port connected to arrayReturnGuarded
    FormalParamArray invoke_to_arrayReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Invoke the to port connected to arrayReturnSync
    FormalParamArray invoke_to_arrayReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Invoke the to port connected to cmdOut
    void invoke_to_cmdOut(
        NATIVE_INT_TYPE portNum, //!< The port number
        FwOpcodeType opCode, //!< Command Op Code
        U32 cmdSeq, //!< Command Sequence
        Fw::CmdArgBuffer& args //!< Buffer containing arguments
    );

    //! Invoke the to port connected to enumArgsGuarded
    void invoke_to_enumArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Invoke the to port connected to enumArgsSync
    void invoke_to_enumArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Invoke the to port connected to enumReturnGuarded
    FormalParamEnum invoke_to_enumReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Invoke the to port connected to enumReturnSync
    FormalParamEnum invoke_to_enumReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Invoke the to port connected to noArgsGuarded
    void invoke_to_noArgsGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Invoke the to port connected to noArgsReturnGuarded
    bool invoke_to_noArgsReturnGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Invoke the to port connected to noArgsReturnSync
    bool invoke_to_noArgsReturnSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Invoke the to port connected to noArgsSync
    void invoke_to_noArgsSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Invoke the to port connected to primitiveArgsGuarded
    void invoke_to_primitiveArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Invoke the to port connected to primitiveArgsSync
    void invoke_to_primitiveArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Invoke the to port connected to primitiveReturnGuarded
    U32 invoke_to_primitiveReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Invoke the to port connected to primitiveReturnSync
    U32 invoke_to_primitiveReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Invoke the to port connected to stringArgsGuarded
    void invoke_to_stringArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        const StringArgsPortStrings::StringSize80& str80, //!< A string of size 80
        StringArgsPortStrings::StringSize80& str80Ref,
        const StringArgsPortStrings::StringSize100& str100, //!< A string of size 100
        StringArgsPortStrings::StringSize100& str100Ref
    );

    //! Invoke the to port connected to stringArgsSync
    void invoke_to_stringArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        const StringArgsPortStrings::StringSize80& str80, //!< A string of size 80
        StringArgsPortStrings::StringSize80& str80Ref,
        const StringArgsPortStrings::StringSize100& str100, //!< A string of size 100
        StringArgsPortStrings::StringSize100& str100Ref
    );

    //! Invoke the to port connected to structArgsGuarded
    void invoke_to_structArgsGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Invoke the to port connected to structArgsSync
    void invoke_to_structArgsSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Invoke the to port connected to structReturnGuarded
    FormalParamStruct invoke_to_structReturnGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Invoke the to port connected to structReturnSync
    FormalParamStruct invoke_to_structReturnSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Invoke the to port connected to serialGuarded
    void invoke_to_serialGuarded(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::SerializeBufferBase& buffer //!< The serialization buffer
    );

    //! Invoke the to port connected to serialSync
    void invoke_to_serialSync(
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::SerializeBufferBase& buffer //!< The serialization buffer
    );

  protected:

    // ----------------------------------------------------------------------
    // Getters for port counts
    // ----------------------------------------------------------------------

    //! Get the number of to_cmdIn ports
    //!
    //! \return The number of to_cmdIn ports
    NATIVE_INT_TYPE getNum_to_cmdIn() const;

    //! Get the number of to_arrayArgsGuarded ports
    //!
    //! \return The number of to_arrayArgsGuarded ports
    NATIVE_INT_TYPE getNum_to_arrayArgsGuarded() const;

    //! Get the number of to_arrayArgsSync ports
    //!
    //! \return The number of to_arrayArgsSync ports
    NATIVE_INT_TYPE getNum_to_arrayArgsSync() const;

    //! Get the number of to_arrayReturnGuarded ports
    //!
    //! \return The number of to_arrayReturnGuarded ports
    NATIVE_INT_TYPE getNum_to_arrayReturnGuarded() const;

    //! Get the number of to_arrayReturnSync ports
    //!
    //! \return The number of to_arrayReturnSync ports
    NATIVE_INT_TYPE getNum_to_arrayReturnSync() const;

    //! Get the number of to_cmdOut ports
    //!
    //! \return The number of to_cmdOut ports
    NATIVE_INT_TYPE getNum_to_cmdOut() const;

    //! Get the number of to_enumArgsGuarded ports
    //!
    //! \return The number of to_enumArgsGuarded ports
    NATIVE_INT_TYPE getNum_to_enumArgsGuarded() const;

    //! Get the number of to_enumArgsSync ports
    //!
    //! \return The number of to_enumArgsSync ports
    NATIVE_INT_TYPE getNum_to_enumArgsSync() const;

    //! Get the number of to_enumReturnGuarded ports
    //!
    //! \return The number of to_enumReturnGuarded ports
    NATIVE_INT_TYPE getNum_to_enumReturnGuarded() const;

    //! Get the number of to_enumReturnSync ports
    //!
    //! \return The number of to_enumReturnSync ports
    NATIVE_INT_TYPE getNum_to_enumReturnSync() const;

    //! Get the number of to_noArgsGuarded ports
    //!
    //! \return The number of to_noArgsGuarded ports
    NATIVE_INT_TYPE getNum_to_noArgsGuarded() const;

    //! Get the number of to_noArgsReturnGuarded ports
    //!
    //! \return The number of to_noArgsReturnGuarded ports
    NATIVE_INT_TYPE getNum_to_noArgsReturnGuarded() const;

    //! Get the number of to_noArgsReturnSync ports
    //!
    //! \return The number of to_noArgsReturnSync ports
    NATIVE_INT_TYPE getNum_to_noArgsReturnSync() const;

    //! Get the number of to_noArgsSync ports
    //!
    //! \return The number of to_noArgsSync ports
    NATIVE_INT_TYPE getNum_to_noArgsSync() const;

    //! Get the number of to_primitiveArgsGuarded ports
    //!
    //! \return The number of to_primitiveArgsGuarded ports
    NATIVE_INT_TYPE getNum_to_primitiveArgsGuarded() const;

    //! Get the number of to_primitiveArgsSync ports
    //!
    //! \return The number of to_primitiveArgsSync ports
    NATIVE_INT_TYPE getNum_to_primitiveArgsSync() const;

    //! Get the number of to_primitiveReturnGuarded ports
    //!
    //! \return The number of to_primitiveReturnGuarded ports
    NATIVE_INT_TYPE getNum_to_primitiveReturnGuarded() const;

    //! Get the number of to_primitiveReturnSync ports
    //!
    //! \return The number of to_primitiveReturnSync ports
    NATIVE_INT_TYPE getNum_to_primitiveReturnSync() const;

    //! Get the number of to_stringArgsGuarded ports
    //!
    //! \return The number of to_stringArgsGuarded ports
    NATIVE_INT_TYPE getNum_to_stringArgsGuarded() const;

    //! Get the number of to_stringArgsSync ports
    //!
    //! \return The number of to_stringArgsSync ports
    NATIVE_INT_TYPE getNum_to_stringArgsSync() const;

    //! Get the number of to_structArgsGuarded ports
    //!
    //! \return The number of to_structArgsGuarded ports
    NATIVE_INT_TYPE getNum_to_structArgsGuarded() const;

    //! Get the number of to_structArgsSync ports
    //!
    //! \return The number of to_structArgsSync ports
    NATIVE_INT_TYPE getNum_to_structArgsSync() const;

    //! Get the number of to_structReturnGuarded ports
    //!
    //! \return The number of to_structReturnGuarded ports
    NATIVE_INT_TYPE getNum_to_structReturnGuarded() const;

    //! Get the number of to_structReturnSync ports
    //!
    //! \return The number of to_structReturnSync ports
    NATIVE_INT_TYPE getNum_to_structReturnSync() const;

    //! Get the number of to_serialGuarded ports
    //!
    //! \return The number of to_serialGuarded ports
    NATIVE_INT_TYPE getNum_to_serialGuarded() const;

    //! Get the number of to_serialSync ports
    //!
    //! \return The number of to_serialSync ports
    NATIVE_INT_TYPE getNum_to_serialSync() const;

    //! Get the number of from_cmdRegOut ports
    //!
    //! \return The number of from_cmdRegOut ports
    NATIVE_INT_TYPE getNum_from_cmdRegOut() const;

    //! Get the number of from_cmdResponseOut ports
    //!
    //! \return The number of from_cmdResponseOut ports
    NATIVE_INT_TYPE getNum_from_cmdResponseOut() const;

    //! Get the number of from_eventOut ports
    //!
    //! \return The number of from_eventOut ports
    NATIVE_INT_TYPE getNum_from_eventOut() const;

    //! Get the number of from_prmGetOut ports
    //!
    //! \return The number of from_prmGetOut ports
    NATIVE_INT_TYPE getNum_from_prmGetOut() const;

    //! Get the number of from_prmSetOut ports
    //!
    //! \return The number of from_prmSetOut ports
    NATIVE_INT_TYPE getNum_from_prmSetOut() const;

#if FW_ENABLE_TEXT_LOGGING == 1

    //! Get the number of from_textEventOut ports
    //!
    //! \return The number of from_textEventOut ports
    NATIVE_INT_TYPE getNum_from_textEventOut() const;

#endif

    //! Get the number of from_timeGetOut ports
    //!
    //! \return The number of from_timeGetOut ports
    NATIVE_INT_TYPE getNum_from_timeGetOut() const;

    //! Get the number of from_tlmOut ports
    //!
    //! \return The number of from_tlmOut ports
    NATIVE_INT_TYPE getNum_from_tlmOut() const;

    //! Get the number of from_arrayArgsOut ports
    //!
    //! \return The number of from_arrayArgsOut ports
    NATIVE_INT_TYPE getNum_from_arrayArgsOut() const;

    //! Get the number of from_arrayReturnOut ports
    //!
    //! \return The number of from_arrayReturnOut ports
    NATIVE_INT_TYPE getNum_from_arrayReturnOut() const;

    //! Get the number of from_enumArgsOut ports
    //!
    //! \return The number of from_enumArgsOut ports
    NATIVE_INT_TYPE getNum_from_enumArgsOut() const;

    //! Get the number of from_enumReturnOut ports
    //!
    //! \return The number of from_enumReturnOut ports
    NATIVE_INT_TYPE getNum_from_enumReturnOut() const;

    //! Get the number of from_noArgsOut ports
    //!
    //! \return The number of from_noArgsOut ports
    NATIVE_INT_TYPE getNum_from_noArgsOut() const;

    //! Get the number of from_noArgsReturnOut ports
    //!
    //! \return The number of from_noArgsReturnOut ports
    NATIVE_INT_TYPE getNum_from_noArgsReturnOut() const;

    //! Get the number of from_primitiveArgsOut ports
    //!
    //! \return The number of from_primitiveArgsOut ports
    NATIVE_INT_TYPE getNum_from_primitiveArgsOut() const;

    //! Get the number of from_primitiveReturnOut ports
    //!
    //! \return The number of from_primitiveReturnOut ports
    NATIVE_INT_TYPE getNum_from_primitiveReturnOut() const;

    //! Get the number of from_prmGetIn ports
    //!
    //! \return The number of from_prmGetIn ports
    NATIVE_INT_TYPE getNum_from_prmGetIn() const;

    //! Get the number of from_prmSetIn ports
    //!
    //! \return The number of from_prmSetIn ports
    NATIVE_INT_TYPE getNum_from_prmSetIn() const;

    //! Get the number of from_stringArgsOut ports
    //!
    //! \return The number of from_stringArgsOut ports
    NATIVE_INT_TYPE getNum_from_stringArgsOut() const;

    //! Get the number of from_structArgsOut ports
    //!
    //! \return The number of from_structArgsOut ports
    NATIVE_INT_TYPE getNum_from_structArgsOut() const;

    //! Get the number of from_structReturnOut ports
    //!
    //! \return The number of from_structReturnOut ports
    NATIVE_INT_TYPE getNum_from_structReturnOut() const;

    //! Get the number of from_serialOut ports
    //!
    //! \return The number of from_serialOut ports
    NATIVE_INT_TYPE getNum_from_serialOut() const;

  protected:

    // ----------------------------------------------------------------------
    // Connection status queries for to ports
    // ----------------------------------------------------------------------

    //! Check whether port to_cmdIn is connected
    //!
    //! \return Whether port to_cmdIn is connected
    bool isConnected_to_cmdIn(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_arrayArgsGuarded is connected
    //!
    //! \return Whether port to_arrayArgsGuarded is connected
    bool isConnected_to_arrayArgsGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_arrayArgsSync is connected
    //!
    //! \return Whether port to_arrayArgsSync is connected
    bool isConnected_to_arrayArgsSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_arrayReturnGuarded is connected
    //!
    //! \return Whether port to_arrayReturnGuarded is connected
    bool isConnected_to_arrayReturnGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_arrayReturnSync is connected
    //!
    //! \return Whether port to_arrayReturnSync is connected
    bool isConnected_to_arrayReturnSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_cmdOut is connected
    //!
    //! \return Whether port to_cmdOut is connected
    bool isConnected_to_cmdOut(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_enumArgsGuarded is connected
    //!
    //! \return Whether port to_enumArgsGuarded is connected
    bool isConnected_to_enumArgsGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_enumArgsSync is connected
    //!
    //! \return Whether port to_enumArgsSync is connected
    bool isConnected_to_enumArgsSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_enumReturnGuarded is connected
    //!
    //! \return Whether port to_enumReturnGuarded is connected
    bool isConnected_to_enumReturnGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_enumReturnSync is connected
    //!
    //! \return Whether port to_enumReturnSync is connected
    bool isConnected_to_enumReturnSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_noArgsGuarded is connected
    //!
    //! \return Whether port to_noArgsGuarded is connected
    bool isConnected_to_noArgsGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_noArgsReturnGuarded is connected
    //!
    //! \return Whether port to_noArgsReturnGuarded is connected
    bool isConnected_to_noArgsReturnGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_noArgsReturnSync is connected
    //!
    //! \return Whether port to_noArgsReturnSync is connected
    bool isConnected_to_noArgsReturnSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_noArgsSync is connected
    //!
    //! \return Whether port to_noArgsSync is connected
    bool isConnected_to_noArgsSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_primitiveArgsGuarded is connected
    //!
    //! \return Whether port to_primitiveArgsGuarded is connected
    bool isConnected_to_primitiveArgsGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_primitiveArgsSync is connected
    //!
    //! \return Whether port to_primitiveArgsSync is connected
    bool isConnected_to_primitiveArgsSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_primitiveReturnGuarded is connected
    //!
    //! \return Whether port to_primitiveReturnGuarded is connected
    bool isConnected_to_primitiveReturnGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_primitiveReturnSync is connected
    //!
    //! \return Whether port to_primitiveReturnSync is connected
    bool isConnected_to_primitiveReturnSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_stringArgsGuarded is connected
    //!
    //! \return Whether port to_stringArgsGuarded is connected
    bool isConnected_to_stringArgsGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_stringArgsSync is connected
    //!
    //! \return Whether port to_stringArgsSync is connected
    bool isConnected_to_stringArgsSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_structArgsGuarded is connected
    //!
    //! \return Whether port to_structArgsGuarded is connected
    bool isConnected_to_structArgsGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_structArgsSync is connected
    //!
    //! \return Whether port to_structArgsSync is connected
    bool isConnected_to_structArgsSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_structReturnGuarded is connected
    //!
    //! \return Whether port to_structReturnGuarded is connected
    bool isConnected_to_structReturnGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_structReturnSync is connected
    //!
    //! \return Whether port to_structReturnSync is connected
    bool isConnected_to_structReturnSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_serialGuarded is connected
    //!
    //! \return Whether port to_serialGuarded is connected
    bool isConnected_to_serialGuarded(
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Check whether port to_serialSync is connected
    //!
    //! \return Whether port to_serialSync is connected
    bool isConnected_to_serialSync(
        NATIVE_INT_TYPE portNum //!< The port number
    );

  protected:

    // ----------------------------------------------------------------------
    // Functions for testing commands
    // ----------------------------------------------------------------------

    //! Handle a command response
    virtual void cmdResponseIn(
        FwOpcodeType opCode, //!< The opcode
        U32 cmdSeq, //!< The command sequence number
        Fw::CmdResponse response //!< The command response
    );

    //! Send command buffers directly (used for intentional command encoding errors)
    void sendRawCmd(
        FwOpcodeType opCode, //!< The opcode
        U32 cmdSeq, //!< The command sequence number
        Fw::CmdArgBuffer& buf //!< The command argument buffer
    );

    //! Send a CMD_NO_ARGS command
    void sendCmd_CMD_NO_ARGS(
        const NATIVE_INT_TYPE instance, //!< The instance number
        U32 cmdSeq //!< The command sequence number
    );

    //! Send a CMD_PRIMITIVE command
    void sendCmd_CMD_PRIMITIVE(
        const NATIVE_INT_TYPE instance, //!< The instance number
        U32 cmdSeq, //!< The command sequence number
        U32 u32_1, //!< A U32
        U32 u32_2, //!< A U32
        F32 f32_1, //!< An F32
        F32 f32_2, //!< An F32
        bool b1, //!< A boolean
        bool b2 //!< A boolean
    );

    //! Send a CMD_STRINGS command
    void sendCmd_CMD_STRINGS(
        const NATIVE_INT_TYPE instance, //!< The instance number
        U32 cmdSeq, //!< The command sequence number
        const Fw::CmdStringArg& str1, //!< A string
        const Fw::CmdStringArg& str2 //!< Another string
    );

    //! Send a CMD_ENUM command
    void sendCmd_CMD_ENUM(
        const NATIVE_INT_TYPE instance, //!< The instance number
        U32 cmdSeq, //!< The command sequence number
        FormalParamEnum en //!< An enum
    );

    //! Send a CMD_ARRAY command
    void sendCmd_CMD_ARRAY(
        const NATIVE_INT_TYPE instance, //!< The instance number
        U32 cmdSeq, //!< The command sequence number
        FormalParamArray arr //!< An array
    );

    //! Send a CMD_STRUCT command
    void sendCmd_CMD_STRUCT(
        const NATIVE_INT_TYPE instance, //!< The instance number
        U32 cmdSeq, //!< The command sequence number
        FormalParamStruct str //!< A struct
    );

  protected:

    // ----------------------------------------------------------------------
    // Functions for testing events
    // ----------------------------------------------------------------------

    //! Dispatch an event
    void dispatchEvents(
        FwEventIdType id, //!< The event ID
        Fw::Time& timeTag, //!< The time
        const Fw::LogSeverity severity, //!< The severity
        Fw::LogBuffer& args //!< The serialized arguments
    );

#if FW_ENABLE_TEXT_LOGGING

    //! Handle a text event
    void textLogIn(
        FwEventIdType id, //!< The event ID
        Fw::Time& timeTag, //!< The time
        const Fw::LogSeverity severity, //!< The severity
        const Fw::TextLogString& text //!< The event string
    );

#endif

    //! Handle event EventNoArgs
    virtual void logIn_ACTIVITY_HI_EventNoArgs();

    //! Handle event EventPrimitive
    virtual void logIn_ACTIVITY_LO_EventPrimitive(
        U32 u32_1, //!< A U32
        U32 u32_2, //!< A U32
        F32 f32_1, //!< An F32
        F32 f32_2, //!< An F32
        bool b1, //!< A boolean
        bool b2 //!< A boolean
    );

    //! Handle event EventString
    virtual void logIn_COMMAND_EventString(
        const Fw::LogStringArg& str1, //!< A string
        const Fw::LogStringArg& str2 //!< Another string
    );

    //! Handle event EventEnum
    virtual void logIn_DIAGNOSTIC_EventEnum(
        FormalParamEnum en //!< An enum
    );

    //! Handle event EventArray
    virtual void logIn_FATAL_EventArray(
        FormalParamArray arr //!< An array
    );

    //! Handle event EventStruct
    virtual void logIn_WARNING_HI_EventStruct(
        FormalParamStruct str //!< A struct
    );

    //! Handle event EventBool
    virtual void logIn_WARNING_LO_EventBool(
        bool b //!< A boolean
    );

  protected:

    // ----------------------------------------------------------------------
    // Functions for testing telemetry
    // ----------------------------------------------------------------------

    //! Dispatch telemetry
    void dispatchTlm(
        FwChanIdType id, //!< The channel id
        Fw::Time& timeTag, //!< The time
        Fw::TlmBuffer& val //!< The channel value
    );

    //! Handle channel ChannelEnum
    void tlmInput_ChannelEnum(
        Fw::Time& timeTag, //!< The time
        const FormalParamEnum& val //!< The channel value
    );

    //! Handle channel ChannelArray
    void tlmInput_ChannelArray(
        Fw::Time& timeTag, //!< The time
        const FormalParamArray& val //!< The channel value
    );

    //! Handle channel ChannelStruct
    void tlmInput_ChannelStruct(
        Fw::Time& timeTag, //!< The time
        const FormalParamStruct& val //!< The channel value
    );

    //! Handle channel ChannelU32
    void tlmInput_ChannelU32(
        Fw::Time& timeTag, //!< The time
        const U32& val //!< The channel value
    );

    //! Handle channel ChannelF32
    void tlmInput_ChannelF32(
        Fw::Time& timeTag, //!< The time
        const F32& val //!< The channel value
    );

    //! Handle channel ChannelString
    void tlmInput_ChannelString(
        const Fw::Time& timeTag, //!< The time
        const Fw::TlmString& val //!< The channel value
    );

  protected:

    // ----------------------------------------------------------------------
    // Functions to test parameters
    // ----------------------------------------------------------------------

    //! Set parameter ParamBool
    void paramSet_ParamBool(
        const bool& val, //!< The parameter value
        Fw::ParamValid valid //!< The parameter valid flag
    );

    //! Send parameter ParamBool
    void paramSend_ParamBool(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Save parameter ParamBool
    void paramSave_ParamBool(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Set parameter ParamU32
    void paramSet_ParamU32(
        const U32& val, //!< The parameter value
        Fw::ParamValid valid //!< The parameter valid flag
    );

    //! Send parameter ParamU32
    void paramSend_ParamU32(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Save parameter ParamU32
    void paramSave_ParamU32(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Set parameter ParamString
    void paramSet_ParamString(
        const Fw::ParamString& val, //!< The parameter value
        Fw::ParamValid valid //!< The parameter valid flag
    );

    //! Send parameter ParamString
    void paramSend_ParamString(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Save parameter ParamString
    void paramSave_ParamString(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Set parameter ParamEnum
    void paramSet_ParamEnum(
        const FormalParamEnum& val, //!< The parameter value
        Fw::ParamValid valid //!< The parameter valid flag
    );

    //! Send parameter ParamEnum
    void paramSend_ParamEnum(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Save parameter ParamEnum
    void paramSave_ParamEnum(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Set parameter ParamArray
    void paramSet_ParamArray(
        const FormalParamArray& val, //!< The parameter value
        Fw::ParamValid valid //!< The parameter valid flag
    );

    //! Send parameter ParamArray
    void paramSend_ParamArray(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Save parameter ParamArray
    void paramSave_ParamArray(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Set parameter ParamStruct
    void paramSet_ParamStruct(
        const FormalParamStruct& val, //!< The parameter value
        Fw::ParamValid valid //!< The parameter valid flag
    );

    //! Send parameter ParamStruct
    void paramSend_ParamStruct(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

    //! Save parameter ParamStruct
    void paramSave_ParamStruct(
        NATIVE_INT_TYPE instance, //!< The component instance
        U32 cmdSeq //!< The command sequence number
    );

  protected:

    // ----------------------------------------------------------------------
    // Functions to test time
    // ----------------------------------------------------------------------

    //! Set the test time for events and telemetry
    void setTestTime(
        Fw::Time& timeTag //!< The time
    );

  protected:

    // ----------------------------------------------------------------------
    // History functions
    // ----------------------------------------------------------------------

    //! Clear all history
    void clearHistory();

    //! Clear from port history
    void clearFromPortHistory();

    //! Push an entry on the history for from_arrayArgsOut
    void pushFromPortEntry_arrayArgsOut(
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Push an entry on the history for from_arrayReturnOut
    void pushFromPortEntry_arrayReturnOut(
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Push an entry on the history for from_enumArgsOut
    void pushFromPortEntry_enumArgsOut(
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Push an entry on the history for from_enumReturnOut
    void pushFromPortEntry_enumReturnOut(
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Push an entry on the history for from_noArgsOut
    void pushFromPortEntry_noArgsOut();

    //! Push an entry on the history for from_noArgsReturnOut
    void pushFromPortEntry_noArgsReturnOut();

    //! Push an entry on the history for from_primitiveArgsOut
    void pushFromPortEntry_primitiveArgsOut(
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Push an entry on the history for from_primitiveReturnOut
    void pushFromPortEntry_primitiveReturnOut(
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Push an entry on the history for from_prmGetIn
    void pushFromPortEntry_prmGetIn(
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

    //! Push an entry on the history for from_prmSetIn
    void pushFromPortEntry_prmSetIn(
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

    //! Push an entry on the history for from_stringArgsOut
    void pushFromPortEntry_stringArgsOut(
        const StringArgsPortStrings::StringSize80& str80, //!< A string of size 80
        StringArgsPortStrings::StringSize80& str80Ref,
        const StringArgsPortStrings::StringSize100& str100, //!< A string of size 100
        StringArgsPortStrings::StringSize100& str100Ref
    );

    //! Push an entry on the history for from_structArgsOut
    void pushFromPortEntry_structArgsOut(
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Push an entry on the history for from_structReturnOut
    void pushFromPortEntry_structReturnOut(
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Clear event history
    void clearEvents();

#if FW_ENABLE_TEXT_LOGGING

    //! Print a text log history entry
    static void printTextLogHistoryEntry(
        const TextLogEntry& e,
        FILE* file
    );

    //! Print the text log history
    void printTextLogHistory(FILE* const file);

#endif

    //! Clear telemetry history
    void clearTlm();

  private:

    // ----------------------------------------------------------------------
    // Static functions for output ports
    // ----------------------------------------------------------------------

    //! Static function for port from_cmdRegOut
    static void from_cmdRegOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwOpcodeType opCode //!< Command Op Code
    );

    //! Static function for port from_cmdResponseOut
    static void from_cmdResponseOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwOpcodeType opCode, //!< Command Op Code
        U32 cmdSeq, //!< Command Sequence
        const Fw::CmdResponse& response //!< The command response argument
    );

    //! Static function for port from_eventOut
    static void from_eventOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwEventIdType id, //!< Log ID
        Fw::Time& timeTag, //!< Time Tag
        const Fw::LogSeverity& severity, //!< The severity argument
        Fw::LogBuffer& args //!< Buffer containing serialized log entry
    );

    //! Static function for port from_prmGetOut
    static Fw::ParamValid from_prmGetOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

    //! Static function for port from_prmSetOut
    static void from_prmSetOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

#if FW_ENABLE_TEXT_LOGGING == 1

    //! Static function for port from_textEventOut
    static void from_textEventOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwEventIdType id, //!< Log ID
        Fw::Time& timeTag, //!< Time Tag
        const Fw::LogSeverity& severity, //!< The severity argument
        Fw::TextLogString& text //!< Text of log message
    );

#endif

    //! Static function for port from_timeGetOut
    static void from_timeGetOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::Time& time //!< The U32 cmd argument
    );

    //! Static function for port from_tlmOut
    static void from_tlmOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwChanIdType id, //!< Telemetry Channel ID
        Fw::Time& timeTag, //!< Time Tag
        Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
    );

    //! Static function for port from_arrayArgsOut
    static void from_arrayArgsOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Static function for port from_arrayReturnOut
    static FormalParamArray from_arrayReturnOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamArray& a, //!< An array
        FormalParamArray& aRef //!< An array ref
    );

    //! Static function for port from_enumArgsOut
    static void from_enumArgsOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Static function for port from_enumReturnOut
    static FormalParamEnum from_enumReturnOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamEnum& en, //!< An enum
        FormalParamEnum& enRef //!< An enum ref
    );

    //! Static function for port from_noArgsOut
    static void from_noArgsOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Static function for port from_noArgsReturnOut
    static bool from_noArgsReturnOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum //!< The port number
    );

    //! Static function for port from_primitiveArgsOut
    static void from_primitiveArgsOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Static function for port from_primitiveReturnOut
    static U32 from_primitiveReturnOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        U32 u32,
        U32& u32Ref,
        F32 f32,
        F32& f32Ref,
        bool b,
        bool& bRef
    );

    //! Static function for port from_prmGetIn
    static Fw::ParamValid from_prmGetIn_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

    //! Static function for port from_prmSetIn
    static void from_prmSetIn_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        FwPrmIdType id, //!< Parameter ID
        Fw::ParamBuffer& val //!< Buffer containing serialized parameter value
    );

    //! Static function for port from_stringArgsOut
    static void from_stringArgsOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        const StringArgsPortStrings::StringSize80& str80, //!< A string of size 80
        StringArgsPortStrings::StringSize80& str80Ref,
        const StringArgsPortStrings::StringSize100& str100, //!< A string of size 100
        StringArgsPortStrings::StringSize100& str100Ref
    );

    //! Static function for port from_structArgsOut
    static void from_structArgsOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Static function for port from_structReturnOut
    static FormalParamStruct from_structReturnOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        const FormalParamStruct& s, //!< A struct
        FormalParamStruct& sRef //!< A struct ref
    );

    //! Static function for port from_serialOut
    static void from_serialOut_static(
        Fw::PassiveComponentBase* const callComp, //!< The component instance
        NATIVE_INT_TYPE portNum, //!< The port number
        Fw::SerializeBufferBase& buffer //!< The serialization buffer
    );

  protected:

    // ----------------------------------------------------------------------
    // History member variables
    // ----------------------------------------------------------------------

    //! The total number of port entries
    U32 fromPortHistorySize;

    //! The history for from_arrayArgsOut
    History<FromPortEntry_arrayArgsOut>* fromPortHistory_arrayArgsOut;

    //! The history for from_arrayReturnOut
    History<FromPortEntry_arrayReturnOut>* fromPortHistory_arrayReturnOut;

    //! The history for from_enumArgsOut
    History<FromPortEntry_enumArgsOut>* fromPortHistory_enumArgsOut;

    //! The history for from_enumReturnOut
    History<FromPortEntry_enumReturnOut>* fromPortHistory_enumReturnOut;

    //! The size of history for from_noArgsOut
    U32 fromPortHistorySize_noArgsOut;

    //! The size of history for from_noArgsReturnOut
    U32 fromPortHistorySize_noArgsReturnOut;

    //! The history for from_primitiveArgsOut
    History<FromPortEntry_primitiveArgsOut>* fromPortHistory_primitiveArgsOut;

    //! The history for from_primitiveReturnOut
    History<FromPortEntry_primitiveReturnOut>* fromPortHistory_primitiveReturnOut;

    //! The history for from_prmGetIn
    History<FromPortEntry_prmGetIn>* fromPortHistory_prmGetIn;

    //! The history for from_prmSetIn
    History<FromPortEntry_prmSetIn>* fromPortHistory_prmSetIn;

    //! The history for from_stringArgsOut
    History<FromPortEntry_stringArgsOut>* fromPortHistory_stringArgsOut;

    //! The history for from_structArgsOut
    History<FromPortEntry_structArgsOut>* fromPortHistory_structArgsOut;

    //! The history for from_structReturnOut
    History<FromPortEntry_structReturnOut>* fromPortHistory_structReturnOut;

    //! The command response history
    History<CmdResponse>* cmdResponseHistory;

    //! The total number of events seen
    U32 eventsSize;

#if FW_ENABLE_TEXT_LOGGING

    //! The history of text log events
    History<TextLogEntry>* textLogHistory;

#endif

    //! Size of history for event EventNoArgs
    U32 eventsSize_EventNoArgs;

    //! The history of EventPrimitive events
    History<EventEntry_EventPrimitive>* eventHistory_EventPrimitive;

    //! The history of EventString events
    History<EventEntry_EventString>* eventHistory_EventString;

    //! The history of EventEnum events
    History<EventEntry_EventEnum>* eventHistory_EventEnum;

    //! The history of EventArray events
    History<EventEntry_EventArray>* eventHistory_EventArray;

    //! The history of EventStruct events
    History<EventEntry_EventStruct>* eventHistory_EventStruct;

    //! The history of EventBool events
    History<EventEntry_EventBool>* eventHistory_EventBool;

    //! The total number of telemetry inputs seen
    U32 tlmSize;

    //! The history of ChannelEnum values
    History<TlmEntry_ChannelEnum>* tlmHistory_ChannelEnum;

    //! The history of ChannelArray values
    History<TlmEntry_ChannelArray>* tlmHistory_ChannelArray;

    //! The history of ChannelStruct values
    History<TlmEntry_ChannelStruct>* tlmHistory_ChannelStruct;

    //! The history of ChannelU32 values
    History<TlmEntry_ChannelU32>* tlmHistory_ChannelU32;

    //! The history of ChannelF32 values
    History<TlmEntry_ChannelF32>* tlmHistory_ChannelF32;

    //! The history of ChannelString values
    History<TlmEntry_ChannelString>* tlmHistory_ChannelString;

  private:

    // ----------------------------------------------------------------------
    // To ports
    // ----------------------------------------------------------------------

    //! To port connected to cmdIn
    Fw::OutputCmdPort m_to_cmdIn[1];

    //! To port connected to arrayArgsGuarded
    OutputArrayArgsPort m_to_arrayArgsGuarded[2];

    //! To port connected to arrayArgsSync
    OutputArrayArgsPort m_to_arrayArgsSync[2];

    //! To port connected to arrayReturnGuarded
    OutputArrayReturnPort m_to_arrayReturnGuarded[1];

    //! To port connected to arrayReturnSync
    OutputArrayReturnPort m_to_arrayReturnSync[1];

    //! To port connected to cmdOut
    Fw::OutputCmdPort m_to_cmdOut[1];

    //! To port connected to enumArgsGuarded
    OutputEnumArgsPort m_to_enumArgsGuarded[2];

    //! To port connected to enumArgsSync
    OutputEnumArgsPort m_to_enumArgsSync[2];

    //! To port connected to enumReturnGuarded
    OutputEnumReturnPort m_to_enumReturnGuarded[1];

    //! To port connected to enumReturnSync
    OutputEnumReturnPort m_to_enumReturnSync[1];

    //! To port connected to noArgsGuarded
    OutputNoArgsPort m_to_noArgsGuarded[2];

    //! To port connected to noArgsReturnGuarded
    OutputNoArgsReturnPort m_to_noArgsReturnGuarded[1];

    //! To port connected to noArgsReturnSync
    OutputNoArgsReturnPort m_to_noArgsReturnSync[1];

    //! To port connected to noArgsSync
    OutputNoArgsPort m_to_noArgsSync[2];

    //! To port connected to primitiveArgsGuarded
    OutputPrimitiveArgsPort m_to_primitiveArgsGuarded[2];

    //! To port connected to primitiveArgsSync
    OutputPrimitiveArgsPort m_to_primitiveArgsSync[2];

    //! To port connected to primitiveReturnGuarded
    OutputPrimitiveReturnPort m_to_primitiveReturnGuarded[1];

    //! To port connected to primitiveReturnSync
    OutputPrimitiveReturnPort m_to_primitiveReturnSync[1];

    //! To port connected to stringArgsGuarded
    OutputStringArgsPort m_to_stringArgsGuarded[2];

    //! To port connected to stringArgsSync
    OutputStringArgsPort m_to_stringArgsSync[2];

    //! To port connected to structArgsGuarded
    OutputStructArgsPort m_to_structArgsGuarded[2];

    //! To port connected to structArgsSync
    OutputStructArgsPort m_to_structArgsSync[2];

    //! To port connected to structReturnGuarded
    OutputStructReturnPort m_to_structReturnGuarded[1];

    //! To port connected to structReturnSync
    OutputStructReturnPort m_to_structReturnSync[1];

    //! To port connected to serialGuarded
    Fw::OutputSerializePort m_to_serialGuarded[6];

    //! To port connected to serialSync
    Fw::OutputSerializePort m_to_serialSync[6];

  private:

    // ----------------------------------------------------------------------
    // From ports
    // ----------------------------------------------------------------------

    //! From port connected to cmdRegOut
    Fw::InputCmdRegPort m_from_cmdRegOut[1];

    //! From port connected to cmdResponseOut
    Fw::InputCmdResponsePort m_from_cmdResponseOut[1];

    //! From port connected to eventOut
    Fw::InputLogPort m_from_eventOut[1];

    //! From port connected to prmGetOut
    Fw::InputPrmGetPort m_from_prmGetOut[1];

    //! From port connected to prmSetOut
    Fw::InputPrmSetPort m_from_prmSetOut[1];

#if FW_ENABLE_TEXT_LOGGING == 1

    //! From port connected to textEventOut
    Fw::InputLogTextPort m_from_textEventOut[1];

#endif

    //! From port connected to timeGetOut
    Fw::InputTimePort m_from_timeGetOut[1];

    //! From port connected to tlmOut
    Fw::InputTlmPort m_from_tlmOut[1];

    //! From port connected to arrayArgsOut
    InputArrayArgsPort m_from_arrayArgsOut[2];

    //! From port connected to arrayReturnOut
    InputArrayReturnPort m_from_arrayReturnOut[1];

    //! From port connected to enumArgsOut
    InputEnumArgsPort m_from_enumArgsOut[2];

    //! From port connected to enumReturnOut
    InputEnumReturnPort m_from_enumReturnOut[1];

    //! From port connected to noArgsOut
    InputNoArgsPort m_from_noArgsOut[2];

    //! From port connected to noArgsReturnOut
    InputNoArgsReturnPort m_from_noArgsReturnOut[1];

    //! From port connected to primitiveArgsOut
    InputPrimitiveArgsPort m_from_primitiveArgsOut[2];

    //! From port connected to primitiveReturnOut
    InputPrimitiveReturnPort m_from_primitiveReturnOut[1];

    //! From port connected to prmGetIn
    Fw::InputPrmGetPort m_from_prmGetIn[1];

    //! From port connected to prmSetIn
    Fw::InputPrmSetPort m_from_prmSetIn[1];

    //! From port connected to stringArgsOut
    InputStringArgsPort m_from_stringArgsOut[2];

    //! From port connected to structArgsOut
    InputStructArgsPort m_from_structArgsOut[2];

    //! From port connected to structReturnOut
    InputStructReturnPort m_from_structReturnOut[1];

    //! From port connected to serialOut
    Fw::InputSerializePort m_from_serialOut[6];

  private:

    // ----------------------------------------------------------------------
    // Parameter validity flags
    // ----------------------------------------------------------------------

    //! True if parameter ParamBool was successfully received
    Fw::ParamValid m_param_ParamBool_valid;

    //! True if parameter ParamU32 was successfully received
    Fw::ParamValid m_param_ParamU32_valid;

    //! True if parameter ParamString was successfully received
    Fw::ParamValid m_param_ParamString_valid;

    //! True if parameter ParamEnum was successfully received
    Fw::ParamValid m_param_ParamEnum_valid;

    //! True if parameter ParamArray was successfully received
    Fw::ParamValid m_param_ParamArray_valid;

    //! True if parameter ParamStruct was successfully received
    Fw::ParamValid m_param_ParamStruct_valid;

  private:

    // ----------------------------------------------------------------------
    // Parameter variables
    // ----------------------------------------------------------------------

    //! Parameter ParamBool
    bool m_param_ParamBool;

    //! Parameter ParamU32
    U32 m_param_ParamU32;

    //! Parameter ParamString
    Fw::ParamString m_param_ParamString;

    //! Parameter ParamEnum
    FormalParamEnum m_param_ParamEnum;

    //! Parameter ParamArray
    FormalParamArray m_param_ParamArray;

    //! Parameter ParamStruct
    FormalParamStruct m_param_ParamStruct;

  private:

    // ----------------------------------------------------------------------
    // Time variables
    // ----------------------------------------------------------------------

    //! Test time stamp
    Fw::Time m_testTime;

};

#endif
